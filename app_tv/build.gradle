apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// Signing production apk with rootProject.ext.releaseFileSpaceSigningConfig data
if (file("../config/signing/filespace-signing.gradle").exists()) {
    apply from: '../config/signing/filespace-signing.gradle'
} else {
    apply from: '../config/signing/filespace-signing-template.gradle'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.mercandalli.android.apps.files"
        minSdkVersion 21
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.appVersionCode
        versionName rootProject.ext.appVersionName
        resConfigs "fr", "en"
    }

    bundle {
        density.enableSplit = true
        abi.enableSplit = true
        language.enableSplit = false
    }

    signingConfigs {
        releaseSigningConfig rootProject.ext.releaseFileSpaceSigningConfig
    }

    buildTypes {
        release {
            signingConfig signingConfigs.releaseSigningConfig
            minifyEnabled true
            shrinkResources true
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            versionNameSuffix ".dev"
        }
    }
    sourceSets {
        main {
            // Split resources.
            // https://medium.com/google-developer-experts/android-project-structure-alternative-way-29ce766682f0#.sjnhetuhb
            res.srcDirs = [
                    'src/main/res/common',
                    'src/main/res/file_card',
                    'src/main/res/icon',
                    'src/main/res/permission',
                    'src/main/res/search'
            ]
        }

        // Everything related to connected test live in src/androidTest/core/java
        androidTest.java.srcDir 'src/androidTest/core/java'

        // Instrumented unit tests live in src/androidTest/unit
        androidTest.java.srcDir 'src/androidTest/unit/java'

        // Instrumented integration tests live in src/androidTest/integration
        androidTest.java.srcDir 'src/androidTest/integration/java'

        // Instrumented use cases tests live in src/androidTest/usecases
        androidTest.java.srcDir 'src/androidTest/usecases/java'
    }
}

configurations {
    // KtLint - Static code analysis
    // https://proandroiddev.com/kotlin-static-analysis-why-and-how-a12042e34a98
    ktlint
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':file_api_android')

    // Language
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    // Google
    implementation "com.google.android.material:material:1.0.0"

    implementation 'com.android.support:leanback-v17:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.github.bumptech.glide:glide:3.8.0'

    // KtLint - Static code analysis
    // https://proandroiddev.com/kotlin-static-analysis-why-and-how-a12042e34a98
    ktlint "com.github.shyiko:ktlint:0.29.0"
}

// KtLint - Static code analysis
// https://proandroiddev.com/kotlin-static-analysis-why-and-how-a12042e34a98
task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // args "--reporter=checkstyle, output=${buildDir}/ktlint.xml
}
